#+TITLE:AEON (Another Emacs Operating eNvironment)
#+AUTHOR:Joshua Suskalo
#+LANGUAGE: en
#+STARTUP: align indent

* Introduction
:PROPERTIES:
:header-args: :noweb no-export :tangle no
:END:
AEON is a literate config for emacs, built around modularity and ease of use.
Besides some core functionality which is loaded in this file, all functionality
within AEON is built from modules. Each module may provide configuration for a
programming language or software package for emacs, may provide a different way
of working with a certain type of file, or may have larger, far-reaching effects
like an =evil= module which would change the behavior of most other modules by
adding vim emulation and bindings.

We start with bootstrapping the package manager and some core emacs settings which are
used throughout the config, and then from there initialize the module systems, before
finally allowing user customizations to persist between runs of emacs.
#+BEGIN_SRC emacs-lisp :tangle yes
  <<bootstrap-aeon>>
  <<load-emacs-custom-file>>
#+END_SRC


* TODO Modules
:PROPERTIES:
:header-args: :noweb no-export :tangle no
:END:
Modules are the units of configuration in AEON. They are used to declare packages
which should be installed into the emacs distrobution, they create initialization code
to setup the initial state needed for those packages, they configure those packages once
loaded, and finally they may declare additional functionality which can be used to
interact with those packages without modifying them.

** Packages
Packages are loaded with straight.el to allow for proper handling of installation and modifications
of packages that become necessary, as well as configuration. A package can be declared as a depencency
for multiple modules, and each module can define its own set of initialization and configuration steps.
It is undefined behavior for multiple modules to configure the same thing twice, unless a configuration
module is present which defines the interactions.

** Configuration Modules
Configuration Moduels are special modules which generally do not declare any package dependencies.
They however do declare dependencies on multiple modules, and upon being loaded will override any
functionality which would have been conflicting between the two other modules. This allows for a single
place to resolve conflicts between multiple configurations.



* Bootstrapping
:PROPERTIES:
:header-args: :noweb no-export :tangle no
:END:
In order to bootstrap AEON, we first have to change some default settings from
emacs which might get in our way, and then we initialize the core packages which are
used throughout the rest of AEON.

#+BEGIN_SRC emacs-lisp :noweb-ref bootstrap-aeon
  <<core-emacs-configuration>>
  <<load-bootstrap-packages>>
#+END_SRC
** Core Appearance and Usability
When setting up some of the core configuration of AEON, we start by disabling some features
in Emacs which are enabled by default, and then enable UTF-8 support. Next we configure the
embedded lisp interpreter to fit better with modern hardware.

#+BEGIN_SRC emacs-lisp :noweb-ref core-emacs-configuration
  <<disable-unnecessary-default-features>>
  <<enable-utf8-support>>
  <<configure-elisp-interpreter>>
#+END_SRC
*** Disable Unnecessary Features
Emacs comes filled with some features which are simply unneccessary for most people's workflows,
many of which are just plain ugly. All of these features are disabled here. If someone really wants
to use them, they can enable them again in their own config at a later date.

#+BEGIN_SRC emacs-lisp :noweb-ref disable-unnecessary-default-features
  (when (functionp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (functionp 'menu-bar-mode)
    (menu-bar-mode -1))
  (when (functionp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (when (functionp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))
  (when (functionp 'mouse-wheel-mode)
    (mouse-wheel-mode -1))
  (when (functionp 'tooltip-mode)
    (tooltip-mode -1))
  (when (functionp 'blink-cursor-mode)
    (blink-cursor-mode -1))

  (setq ring-bell-function (lambda ())
        inhibit-startup-screen t
        frame-resize-pixelwise t)
#+END_SRC
*** Enable UTF-8 Support
Emacs is a very old text editor, and doesn't come with UTF-8 support pre-enabled.
UTF-8 is rather important to modern file editing however, so AEON enables it by default.

#+BEGIN_SRC emacs-lisp :noweb-ref enable-utf8-support
  (set-charset-priority 'unicode)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
#+END_SRC
*** Configure the Emacs Lisp Interpreter
The emacs lisp interpreter has many default settings which are out of date for modern computers.
The garbage collector doesn't need to be run as often as the default, the message
buffer can have a lot more messages in it, and cl features should be loaded.

#+BEGIN_SRC emacs-lisp :noweb-ref configure-elisp-interpreter
  (require 'cl-lib)

  (setq message-log-max 16384
        gc-cons-threshold (* 50 1024 1024)
        jit-lock-stealth-time 1
        jit-lock-stealth-verbose nil)
#+END_SRC
** Load Bootstrap Packages
In order to bootstrap AEON fully, we need the package manager fully configured. A small amount of configuration happens
before this config is loaded, in which straight.el is installed and then is used to get the latest version of org, which
is then used to load this config. However, throughout the rest of this config and in any modules, the desired interface is
to use use-package, so that will be loaded first, to make loading the other packages for bootstrapping consistent.

#+BEGIN_SRC emacs-lisp :noweb-ref load-bootstrap-packages
  <<use-package-configuration>>
#+END_SRC
*** Use-package Installation and Configuration
straight.el is the package manager used by AEON, but use-package provides a great interface to many package managers,
and is familiar to many Emacs users, so it will be installed here to be used as the primary way of loading packages in
AEON, at least under the hood.

First AEON installs use-package, then we configure use-package to always use straight.el by default.
#+BEGIN_SRC emacs-lisp :noweb-ref use-package-configuration
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+END_SRC


* Load Emacs Custom File
Emacs includes a way to customize large portions of the behaviors that come default from within itself,
handled from within the custom file. Any changes that the user makes through the customize interface will
be saved to the custom file, and the configuration has the option to load that file. Emacs' default behavior
is to append all custom information to the end of the init.el file, however since this is a literate config,
that is less than desireable. Instead we will set a specific file to be used, and load it if it exists.
#+BEGIN_SRC emacs-lisp :noweb-ref load-emacs-custom-file
  (setq custom-file (expand-file-name ".custom.el" user-emacs-directory))

  (when (file-exists-p custom-file)
    (load-file custom-file))
#+END_SRC
